import json
import os
import re
from datetime import timedelta, time

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command, Filter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.change_price import Settings
from app.database.requests import add_car, get_all_car, remove_car, print_all_online_executions, \
    get_all_drivers_with_update_date, get_users, get_one_car, get_driver_info, reset_to_zero, update_car, \
    get_users_count, add_change_price, ban_user, get_ban_all_user

import app.keyboards as kb
import app.kb.kb_admin as kb_admin
from filters.chat_type import ChatTypeFilter, IsAdmin
from handlers.handlers import router
from middleware.time_restriction_middleware import TimeRestrictionMiddleware

time_restriction_middleware_instance = router.message.middleware(TimeRestrictionMiddleware())

admin = Router()
admin.message.filter(ChatTypeFilter(["private"]), IsAdmin())


class AddDriver(StatesGroup):
    name = State()
    phone = State()
    car_name = State()
    number_car = State()
    photo_car = State()
    tg_id = State()


# class AdminProtect(Filter):
#     async def __call__(self, message: Message):
#         return message.from_user.id in [216159472]


@admin.message(IsAdmin(), Command("admin"))
async def admin_features(message: Message):
    # test = await get_info_online_tablo()
    # for i in test:
    #     await message.answer(i)
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=await kb_admin.admin_keyboard())


# -----------------–í—Ä–µ–º—è —Å–Ω–∞---------------

@admin.callback_query(IsAdmin(), F.data == 'time_restriction')
async def time_restriction(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–î–µ–π—Å—Ç–≤–∏–µ üí§', reply_markup=await kb_admin.turn_time_rest())


@admin.callback_query(IsAdmin(), F.data.startswith('turntimerest_'))
async def turn_or_of_timerest(callback: CallbackQuery):
    await callback.answer('')
    answer = callback.data.split('_')[1]

    if answer == 'YES':
        time_restriction_middleware_instance.activate()
        await callback.message.answer("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.")
    elif answer == 'NO':
        time_restriction_middleware_instance.deactivate()
        await callback.message.answer("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.")


# ------------------–ú–µ–Ω—é –º–∞—à–∏–Ω-----------------------
@admin.callback_query(IsAdmin(), F.data == 'car_menu')
async def car_menu(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.edit_text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ üöó',
                                     reply_markup=await kb_admin.car_menu_keyboard())


# ------------------–î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É /add_car-----------------------

@admin.callback_query(IsAdmin(), F.data == 'add_car')
async def add_phone1(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddDriver.phone)
    await callback.answer('')
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ 7', reply_markup=await kb.cancel_order())


@admin.message(IsAdmin(), AddDriver.phone, F.text)
async def add_name(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(AddDriver.name)
    await message.answer('–ö–∞–∫ –∑–æ–≤—É—Ç –≤–æ–¥–∏—Ç–µ–ª—è', reply_markup=await kb.cancel_order())


@admin.message(AddDriver.phone)
async def add_phone2(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É')


@admin.message(IsAdmin(), AddDriver.name, F.text)
async def add_car_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddDriver.car_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –º–∞—à–∏–Ω—ã', reply_markup=await kb.cancel_order())


@admin.message(AddDriver.name)
async def add_name2(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è')


@admin.message(IsAdmin(), AddDriver.car_name, F.text)
async def add_number_car(message: Message, state: FSMContext):
    await state.update_data(car_name=message.text)
    await state.set_state(AddDriver.number_car)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã', reply_markup=await kb.cancel_order())


@admin.message(AddDriver.car_name)
async def add_car_name(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã')


@admin.message(IsAdmin(), AddDriver.number_car, F.text)
async def add_item_category(message: Message, state: FSMContext):
    await state.update_data(number_car=message.text)
    await state.set_state(AddDriver.tg_id)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å CHAT-ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=await kb.cancel_order())


@admin.message(AddDriver.number_car)
async def add_number_car(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫–Ω–æ –≥–æ—Å –Ω–æ–º–µ—Ä')


@admin.message(IsAdmin(), AddDriver.tg_id, F.text)
async def add_tg_id(message: Message, state: FSMContext):
    await state.update_data(tg_id=message.text)
    await state.set_state(AddDriver.photo_car)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã', reply_markup=await kb.cancel_order())


@admin.message(AddDriver.tg_id)
async def add_tg_id(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ chat-id')


@admin.message(IsAdmin(), AddDriver.photo_car, F.photo)
async def add_item_category(message: Message, state: FSMContext):
    await state.update_data(photo_car=message.photo[-1].file_id)
    data = await state.get_data()
    await message.answer_photo(photo=data['photo_car'], caption=f"–¢–µ–ª–µ—Ñ–æ–Ω {data['phone']}")
    await add_car(data)
    await message.answer('–ú–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    await state.clear()


@admin.message(AddDriver.photo_car)
async def phone(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')


# ------------------–£–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É /delete_car-----------------------

# drivers = await get_all_car()
# for driver in drivers:
#     await callback.message.answer_photo(photo=driver.photo_car)
#     await callback.message.answer(f"{driver.phone}\n{driver.name}\n{driver.car_name}\n{driver.number_car}\n",
#                                   reply_markup=await kb_admin.delete_car(driver.id))


# ------------------–£–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É /delete_car-----------------------
class EditCarStates(StatesGroup):
    waiting_for_new_value = State()


@admin.callback_query(IsAdmin(), F.data == 'edit_car')
async def edit_car(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –º–∞—à–∏–Ω—É –∏–∑–º–µ–Ω–∏—Ç—å üïµÔ∏è‚Äç‚ôÄÔ∏è',
                                  reply_markup=await kb_admin.edit_car())


@admin.callback_query(IsAdmin(), F.data.startswith('editcar_'))
async def edit_car_1(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    driver = await get_one_car(callback.data.split('_')[1])
    await callback.message.answer_photo(photo=driver.photo_car)
    await callback.message.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω - {driver.phone}\n"
                                  f"–ò–º—è - {driver.name}\n"
                                  f"–ù–∞–∑–≤–∞–Ω–∏–µ - {driver.car_name}\n"
                                  f"–ù–æ–º–µ—Ä - {driver.number_car}\n")
    await state.update_data(driver_id=driver.id)
    await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n'
                                  f'–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–º–µ—Ä M404BH\n'
                                  f'–ò–ª–∏: –§–æ—Ç–æ –∏ –ø–æ—Å–ª–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ',
                                  reply_markup=await kb.cancel_order())
    await state.set_state(EditCarStates.waiting_for_new_value)


@admin.message(IsAdmin(), EditCarStates.waiting_for_new_value, (F.text | F.photo))
async def edit_car_2(message: Message, state: FSMContext):
    if message.text:
        new_value = message.text
        data = await state.get_data()
        patterns = {
            '–∏–º—è': re.compile(r'^–ò–º—è\s+(.+)$', re.IGNORECASE),
            '—Ç–µ–ª–µ—Ñ–æ–Ω': re.compile(r'^–¢–µ–ª–µ—Ñ–æ–Ω\s+([7]\d{10})$', re.IGNORECASE),
            '–Ω–∞–∑–≤–∞–Ω–∏–µ': re.compile(r'^–ù–∞–∑–≤–∞–Ω–∏–µ\s+(.+)$', re.IGNORECASE),
            '–Ω–æ–º–µ—Ä': re.compile(r'^–ù–æ–º–µ—Ä\s+(.+)$', re.IGNORECASE),
        }
        matched = False
        for field, pattern in patterns.items():
            match = pattern.match(new_value)
            if match:
                new_value_text = match.group(1)
                if field == '—Ç–µ–ª–µ—Ñ–æ–Ω':
                    await state.update_data(phone=new_value_text)
                    await message.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_value_text}")
                elif field == '–∏–º—è':
                    await state.update_data(name=new_value_text)
                    await message.answer(f"–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_value_text}")
                elif field == '–Ω–∞–∑–≤–∞–Ω–∏–µ':
                    await state.update_data(car_name=new_value_text)
                    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_value_text}")
                elif field == '–Ω–æ–º–µ—Ä':
                    await state.update_data(number_car=new_value_text)
                    await message.answer(f"–ù–æ–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_value_text}")
                matched = True
                break
        if not matched:
            await message.answer(f"–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –∞—Ç—Ä–∏–±—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

    elif message.photo:
        photo = message.photo[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        file_id = photo.file_id
        await state.update_data(photo_car=file_id)
        await message.answer("–§–æ—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
    data = await state.get_data()

    await update_car(data)
    await state.clear()
    return


@admin.callback_query(IsAdmin(), F.data == 'number_passeger')
async def number_passeger(callback_query: CallbackQuery):
    await callback_query.answer('')
    users = await get_users_count()
    await callback_query.message.edit_text(f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {users} ü•≥')


@admin.callback_query(IsAdmin(), F.data == 'delete_car')
async def delete_car_message(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –∫–∞–∫—É—é —É–¥–∞–ª–∏—Ç—å ü•≤',
                                  reply_markup=await kb_admin.delete_car())


@admin.callback_query(IsAdmin(), F.data.startswith('deletecar_'))
async def delete_car_callback(callback: CallbackQuery):
    await callback.answer('')
    await remove_car(callback.data.split('_')[1])
    await callback.message.edit_text('–ú–∞—à–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∞')


# ------------------–≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã –æ–Ω–ª–∞–π–Ω-----------------------
@admin.callback_query(IsAdmin(), F.data == 'online')
async def admin_features(callback: CallbackQuery):
    await callback.answer('')
    all_drivers = await get_all_drivers_with_update_date()

    active_drivers = [driver for driver in all_drivers if driver.active]
    inactive_drivers = [driver for driver in all_drivers if not driver.active]

    for driver in active_drivers:
        await callback.message.answer(f'–ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏:\n'
                                      f'–ú–∞—à–∏–Ω–∞ {driver.car_name} - {driver.number_car} –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {driver.updated + timedelta(hours=9)}')

    for driver in inactive_drivers:
        await callback.message.answer(f'–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏:\n'
                                      f'–ú–∞—à–∏–Ω–∞ {driver.car_name} - {driver.number_car} –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {driver.updated + timedelta(hours=9)}')

    # online_executions = await print_all_online_executions()
    # for online_execution in online_executions:
    #     driver = online_execution
    #     for order in driver.orders_reply:
    #         # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–º —Å —ç—Ç–∏–º –∑–∞–∫–∞–∑–æ–º
    #         await callback.message.answer(f'–í–æ–¥–∏—Ç–µ–ª—å –º–∞—à–∏–Ω—ã -{driver.car_name} {driver.number_car}\n'
    #                                       f'–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫–∞–∑ ‚Ññ{order.id}\n'
    #                                       f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞:{order.point_start}\n"
    #                                       f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: {order.point_end}\n"
    #                                       f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:{order.distance}–∫–º\n"
    #                                       f"–í—Ä–µ–º—è –ø—É—Ç–∏:{order.time_way}–º–∏–Ω\n"
    #                                       f"–¶–µ–Ω–∞: {order.price}")


# --------------—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º-------------
class Newsletter(StatesGroup):
    message = State()


@admin.callback_query(IsAdmin(), F.data == 'newletter')
async def newsletter(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(Newsletter.message)
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–≤—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                                  reply_markup=await kb.cancel_order())


@admin.message(IsAdmin(), Newsletter.message)
async def newsletter_message(message: Message, state: FSMContext):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ .. –∏–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞')
    for user in await get_users():
        try:
            await message.send_copy(chat_id=user.tg_id)
        except:
            pass
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    await state.clear()


# ----------–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –ø–æ–µ–∑–¥–∫–∏----------

class ChangeMoney(StatesGroup):
    price = State()
    change_price = State()


@admin.callback_query(IsAdmin(), F.data == 'change_settings')
async def change_settings_callback1(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≥–¥–µ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Ç–∞—Ä–∏—Ñ üíµ',
                                     reply_markup=await kb_admin.change_money())


@admin.callback_query(IsAdmin(), or_f(F.data == 'changeinside', F.data == 'changeoutside', \
                                      F.data == 'change_point_start_end'))
async def change_settings_callback2(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    if callback.data == 'changeinside':
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–¥–µ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Ç–∞—Ä–∏—Ñ üíµ',
                                      reply_markup=await kb_admin.change_mouney_inside())
    elif callback.data == 'changeoutside':
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–¥–µ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Ç–∞—Ä–∏—Ñ üíµ',
                                      reply_markup=await kb_admin.change_mouney_outside())
    elif callback.data == 'change_point_start_end':
        await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–æ–º–µ–Ω—è—Ç—å, —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç {Settings.fix_price}')
        await state.set_state(ChangeMoney.change_price)

@admin.message(IsAdmin(), ChangeMoney.change_price, F.text)
async def change_settings_value(message: Message, state: FSMContext):
    input_int = message.text.strip()
    pattern = r"^\d+$"
    if re.match(pattern, input_int):
        await state.update_data(setting=message.text)
        Settings.set_fix_price(int(message.text))
        await message.answer(f'–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ {Settings.fix_price}')
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")


@admin.callback_query(IsAdmin(), or_f(F.data.startswith('chin_'), F.data.startswith('chout_')))
async def change_settings_callback3(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    if callback.data.startswith('chin_'):
        city = callback.data.split('_')[1]
        database = "inside"
        await state.update_data(city_name=city, database=database)
        price = callback.data.split('_')[2]
        await callback.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {city}, —Ü–µ–Ω–∞: {price}—Ä\n\n'
                                         f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∏–∑–º–µ–Ω–∏—Ç—å')
    elif callback.data.startswith('chout_'):
        city = callback.data.split('_')[1]
        database = "outside"
        await state.update_data(city_name=city, database=database)
        price = callback.data.split('_')[2]
        await callback.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {city}, —Ü–µ–Ω–∞: {price}—Ä\n\n'
                                         f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∏–∑–º–µ–Ω–∏—Ç—å')
    await state.set_state(ChangeMoney.price)


@admin.message(IsAdmin(), ChangeMoney.price, F.text)
async def change_settings_callback4(message: Message, state: FSMContext):
    input_int = message.text.strip()
    pattern = r"^\d+$"
    if re.match(pattern, input_int):
        await state.update_data(price=input_int)
        data = await state.get_data()
        await add_change_price(data['price'], data['city_name'], data['database'])
        await message.answer("–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å")
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")


# class ChangeSettings(StatesGroup):
#     setting = State()
#     change_price = State()

# @admin.callback_query(IsAdmin(), F.data == 'distance_rate')
# async def set_distance_rate(callback: CallbackQuery, state: FSMContext):
#     await callback.answer('')
#     await state.update_data(change_price='distance_rate')
#     await state.set_state(ChangeSettings.setting)
#     await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä:\n'
#                                   '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ü–µ–Ω–∞ 40 –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä', await kb.cancel_order())
#
#
# @admin.callback_query(IsAdmin(), F.data == 'time_rate')
# async def set_time_rate(callback: CallbackQuery, state: FSMContext):
#     await callback.answer('')
#     await state.update_data(change_price='time_rate')
#     await state.set_state(ChangeSettings.setting)
#     await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ –º–∏–Ω—É—Ç—É:\n'
#                                   f'–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ü–µ–Ω–∞ 10 –∑–∞ –º–∏–Ω—É—Ç—É', await kb.cancel_order())
#
#
# @admin.message(IsAdmin(), ChangeSettings.setting, F.text)
# async def change_settings_value(message: Message, state: FSMContext):
#     await state.update_data(setting=message.text)
#     Settings.set_fix_price(int(message.text))
#     await message.answer(f'–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ {Settings.fix_price}')

# change_price = data.get('change_price')
# if change_price == 'distance_rate':
#     Settings.set_distance_rate(int(message.text))
#     await message.answer(f'–¶–µ–Ω–∞ –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ {Settings.distance_rate}')
# elif change_price == 'time_rate':
#     Settings.set_time_rate(int(message.text))
# #     await message.answer(f'–¶–µ–Ω–∞ –∑–∞ –º–∏–Ω—É—Ç—É —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ {Settings.time_rate}')
# await state.clear()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin.callback_query(IsAdmin(), F.data.startswith('addcaradmin_'))
async def addcaradmin(callback: CallbackQuery, bot: Bot):
    await callback.answer('')
    answer = callback.data.split("_")[2]
    driver_id = callback.data.split("_")[1]
    driver_id = await get_one_car(driver_id)

    if answer == "YES":
        await callback.message.delete()
        await bot.send_message(chat_id=driver_id.tg_id,
                               text='–ú–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    elif answer == "NO":
        await callback.message.delete()
        await bot.send_message(chat_id=driver_id.tg_id,
                               text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–∞—à–∏–Ω–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
        await remove_car(callback.data.split('_')[1])
    await bot.answer_callback_query(callback.id)


@admin.callback_query(IsAdmin(), F.data == 'info')
async def info(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å',
                                  reply_markup=await kb_admin.all_car())


@admin.callback_query(IsAdmin(), F.data.startswith('infocardriver_'))
async def info_car_driver(callback: CallbackQuery):
    driver_id = int(callback.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –∫–æ–ª–±—ç–∫–∞
    driver_info = await get_driver_info(driver_id)

    if driver_info is not None:
        total_orders = len(driver_info.orders_reply)
        total_earnings = sum(order.price for order in driver_info.orders_reply)
        # data_created = [data.created for data in driver_info.orders_reply]
        # print(data_created)
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω—É–ª–µ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        zero_price_orders_count = sum(1 for order in driver_info.orders_reply if order.price == 0)


        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–¥–∏—Ç–µ–ª–µ
        message_text = (
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ:\n"
            f"–ò–º—è: <b>{driver_info.name}</b>\n"
            f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: <b>{driver_info.car_name} - {driver_info.number_car}</b>\n"
            f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total_orders}</b>\n"
            f"–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: <b>{total_earnings} —Ä—É–±.</b>\n"
            f"-------------------------------\n"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö —Å –Ω—É–ª–µ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å
        if zero_price_orders_count > 0:
            message_text += f"<b>–ó–∞–∫–∞–∑–æ–≤ —Å –Ω—É–ª–µ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é: {zero_price_orders_count}</b>\n"

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–∞—Ç–∞–º
        orders_by_date = {}
        for order in driver_info.orders_reply:
            date = order.created.date() + timedelta(hours=9)
            orders_by_date[date] = orders_by_date.get(date, 0) + 1

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–∞—Ç–∞–º –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        for date, count in orders_by_date.items():
            message_text += f"{date}: -  <b>{count}</b> –∑–∞–∫–∞–∑–æ–≤\n"

        await callback.answer('')
        await callback.message.answer(message_text, reply_markup=await kb.reset_zero(driver_id))
    else:
        await callback.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')


@admin.callback_query(IsAdmin(), F.data.startswith('resetzero_'))
async def reset_zero(callback: CallbackQuery):
    await callback.answer('')
    driver_id = callback.data.split('_')[1]
    await reset_to_zero(driver_id)
    await callback.message.edit_text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω—É–ª–µ–Ω–∞')


class BanUser(StatesGroup):
    banned = State()


@admin.callback_query(IsAdmin(), F.data == 'ban_user')
async def ban_users(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå',
                                  reply_markup=await kb_admin.ban_users_phone())


@admin.callback_query(IsAdmin(), or_f(F.data == 'ban_add', F.data == 'ban_no', F.data == 'ban_list'))
async def ban_users2(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    if callback.data == 'ban_add':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79991115577\n'
                                      '–ë–µ–∑ –∑–Ω–∞–∫–∞ –ø–ª—é—Å', reply_markup=await kb.cancel_order())
        await state.update_data(banned=True)
    elif callback.data == 'ban_no':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79991115577\n'
                                      '–ë–µ–∑ –∑–Ω–∞–∫–∞ –ø–ª—é—Å', reply_markup=await kb.cancel_order())

        await state.update_data(banned=False)
    elif callback.data == 'ban_list':
        results = await get_ban_all_user()
        message_text = (
            f'–õ–∏—Å—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n'
        )
        for result in results:
            message_text += f'{result.phone}\n'

        await callback.message.answer(message_text)
        return
    await state.set_state(BanUser.banned)


@admin.message(IsAdmin(), BanUser.banned, F.text)
async def ban_users3(message: Message, state: FSMContext):
    input_int = message.text.strip()
    pattern = r"^7\d{10}$"
    if re.match(pattern, input_int):
        await state.update_data(phone=input_int)
        data = await state.get_data()
        await ban_user(data['phone'], data['banned'])
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        await state.clear()
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞  –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79991115577")


# --- –û—Ç–≤—Ç–µ–∏—Ç—å –Ω–∞  –∑–∞—è–≤–∫—É  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É-----
class SendToUser(StatesGroup):
    sendTouser = State()


@admin.callback_query(IsAdmin(), F.data == 'sendTouser')
async def sendTouser(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è –º–æ–¥—É–ª–µ–º "–û—Ç–≤–µ—Ç–∏—Ç—å"')
    await state.set_state(SendToUser.sendTouser)


@admin.message(IsAdmin(), SendToUser.sendTouser, F.text)
async def send_user(message: Message, state: FSMContext, bot: Bot):
    if (message.reply_to_message):
        try:
            user_id = message.reply_to_message.text.split('"')[1]
            await bot.send_message(user_id, f'–û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n<b>{message.text}</b>')
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            await state.clear()
        except IndexError:
            await message.reply(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            await state.clear()
    else:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        await state.set_state(SendToUser.sendTouser)
