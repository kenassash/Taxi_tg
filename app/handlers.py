from aiogram import Router, F
from aiogram.handlers import CallbackQueryHandler
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup, StateFilter
from haversine import haversine, Unit
from aiogram import Bot

import app.keyboards as kb
from app.geolocation import coords_to_address, addess_to_coords
from app.database.requests import set_user, set_order, get_all_orders
from filters.chat_type import ChatTypeFilter
from app.calculate import length_way


router = Router()
router.message.filter(ChatTypeFilter(['private']))
class AddOrder(StatesGroup):
    tg_id = State()
    point_start = State()
    point_end = State()
    phone = State()

    coordinat_start_x = State()
    coordinat_start_y = State()
    coordinat_end_x = State()
    coordinat_end_y = State()



@router.message(CommandStart())
async def cmd_start(message: Message):
    await set_user(message.from_user.id)
    full_name = message.from_user.full_name
    await message.answer(f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {full_name} </b>üòä', reply_markup=kb.main)



@router.callback_query(StateFilter(None), F.data == 'neworder')
async def neworder(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.edit_text(
        f'<b>üÖ∞Ô∏è: –û—Ç–∫—É–¥–∞ –ø–æ–µ–¥–∏—Ç–µ ‚ùì\nüñãÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ —É–ª–∏—Ü—É –∏ ‚Ññ –¥–æ–º–∞\n\n–∏–ª–∏\n\n–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é</b>')
    await state.set_state(AddOrder.point_start)


@router.message(AddOrder.point_start, F.text)
async def point_starter(message: Message, state: FSMContext):
    address_go = message.text
    print(address_go)
    try:
        longitude_end, latitude_end, trimmed_string = await addess_to_coords(address_go)
        print(trimmed_string)
        print(float(longitude_end), float(latitude_end))
    except IndexError:
        await message.answer('–£–ª–∏—Ü–∞ –∏ –¥–æ–º –Ω–µ –∫–æ—Ä—Ä–µ—Ç–Ω–æ')
        await state.clear()
        full_name = message.from_user.full_name
        await message.answer(f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {full_name} </b>üòä', reply_markup=kb.main)
        return

    await state.update_data(point_start=trimmed_string,
                            coordinat_start_x=float(longitude_end),
                            coordinat_start_y=float(latitude_end))
    data = await state.get_data()
    point = data.get('point_start')
    await message.answer(f'<b>üÖ∞Ô∏è: {point} \nüìç----\n\nüÖ±Ô∏è: –ö—É–¥–∞ –µ–¥–µ–º?\nÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ —É–ª–∏—Ü—É –∏ ‚Ññ –¥–æ–º–∞</b>')
    await state.set_state(AddOrder.point_end)


@router.message(AddOrder.point_start)
async def point_start(message: Message, state: FSMContext):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ—Ç–∫–Ω–æ –æ—Ç –∫—É–¥–∞ –µ–¥–∏—Ç–µ')


@router.message(AddOrder.point_end, F.text)
async def phone(message: Message, state: FSMContext):
    address_go = message.text
    try:
        longitude_end, latitude_end, trimmed_string = await addess_to_coords(address_go)
        print(trimmed_string)
        print(longitude_end, latitude_end)
    except IndexError:
        await message.answer('–£–ª–∏—Ü–∞ –∏ –¥–æ–º –Ω–µ –∫–æ—Ä—Ä–µ—Ç–Ω–æ')
        await state.clear()
        full_name = message.from_user.full_name
        await message.answer(f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {full_name} </b>üòä', reply_markup=kb.main)
        return
    await state.update_data(point_end=trimmed_string,
                            coordinat_end_x=float(longitude_end),
                            coordinat_end_y=float(latitude_end))
    await state.set_state(AddOrder.phone)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ç–µ–ª–µ—Ñ–æ–Ω', reply_markup=await kb.phone())


@router.message(AddOrder.point_end)
async def phone(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ—Ç–∫–Ω–æ –∫—É–¥–∞ –µ–¥–∏—Ç–µ')


@router.message(AddOrder.phone, F.contact)
async def phone(message: Message, state: FSMContext,  bot: Bot):
    await state.update_data(phone=message.contact.phone_number, tg_id=message.from_user.id)
    data = await state.get_data()
    distance, time_way, price = await length_way(data['coordinat_start_x'],
                          data['coordinat_start_y'],
                          data['coordinat_end_x'],
                          data['coordinat_end_y'])

    await state.update_data(distance=distance, time_way=time_way, price=price)
    data = await state.get_data()
    order_id = await set_order(data)

    await message.answer(f"<i><b>–í–∞—à –∑–∞–∫–∞–∑.</b></i>\n\n"
                         f"<i><b>–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞:</b></i> {data['point_start']}\n\n"
                         f"<i><b>–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞:</b></i> {data['point_end']}\n\n"
                         f"<i><b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b></i> {distance}–∫–º\n\n"
                         f"<i><b>–í—Ä–µ–º—è –ø—É—Ç–∏:</b></i> {time_way}–º–∏–Ω\n\n"
                         f"<b>–¶–µ–Ω–∞:</b> {price}‚ÇΩ",
                         reply_markup=ReplyKeyboardRemove())
    order_data = await get_all_orders(order_id)
    await bot.send_message(chat_id=-1002080907384,
                           text=f"<i><b>–ó–∞–∫–∞–∑ {order_id}</b></i>\n\n"
                                f"<i><b>–¢–µ–ª–µ—Ñ–æ–Ω {order_data.phone}</b></i>\n\n"
                                f"<i><b>–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞:</b></i> {order_data.point_start}\n\n"
                                f"<i><b>–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞:</b></i> {order_data.point_end}\n\n"
                                f"<i><b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b></i> {order_data.distance}–∫–º\n\n"
                                f"<i><b>–í—Ä–µ–º—è –ø—É—Ç–∏:</b></i> {order_data.time_way}–º–∏–Ω\n\n"
                                f"<b>–¶–µ–Ω–∞:</b> {order_data.price}–†",
                           reply_markup=await kb.accept(order_id))
    await state.clear()



@router.message(AddOrder.phone)
async def phone(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É')
