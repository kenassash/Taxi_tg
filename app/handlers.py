import os

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, or_f, Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup, StateFilter
from aiogram import Bot
from dotenv import load_dotenv

import app.keyboards as kb
import app.keyboard_city as kb_city
from app.change_price import Settings
from app.geolocation import coords_to_address, addess_to_coords
from app.database.requests import set_user, set_order, get_all_orders, get_driver, active_driver, get_user, add_car, \
    delete_order_pass, get_order_driver
from filters.chat_type import ChatTypeFilter
from app.calculate import length_way
from utils.paginator import Paginator

router = Router()
router.message.filter(ChatTypeFilter(['private']))
load_dotenv()


# ----------------–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑---------------
@router.message(F.text == '–û—Ç–º–µ–Ω–∏—Ç—å')
async def cancel_order_reply(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑. –ù–∞–∂–º–∏—Ç–∫–µ /start —á—Ç–æ–± –Ω–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É', reply_markup=ReplyKeyboardRemove())


@router.callback_query(StateFilter('*'), F.data == 'backbutton_')
async def backbutton(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()

    previous = None
    for step in AddOrder.__all_states__:
        if step.state == 'AddOrder:address1':
            await state.set_state(previous)
            await callback.answer('')
            await callback.message.edit_text(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É\n\n{AddOrder.texts[previous.state]}\n',
                                             reply_markup=await kb_city.keyboard_city1())
            return

        previous = step


# ----------------–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑---------------
@router.callback_query(F.data.startswith('cancelorder_'))
async def cancelorder(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.clear()
    await callback.message.delete()

    await callback.message.answer(f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏')


class AddOrder(StatesGroup):
    city1 = State()
    address1 = State()
    city2 = State()
    address2 = State()

    texts = {
        'AddOrder:city1': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç –∫—É–¥–∞ –ø–æ–µ–¥–∏—Ç–µ',
        'AddOrder:address1': '–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∫—É–¥–∞ –ø–æ–µ–¥–∏—Ç–µ',
        'AddOrder:city2': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–¥–∞ –ø–æ–µ–¥–∏—Ç–µ',
        'AddOrder:address2': '–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç –∫—É–¥–∞ –ø–æ–µ–¥–∏—Ç–µ',

    }


class AddUser(StatesGroup):
    phone = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–∫—Å–∏—Å—Ç–æ–º
    drivers = await get_driver(message.from_user.id)
    if drivers and drivers.tg_id == message.from_user.id:
        await message.answer(f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¢–∞–∫—Å–∏—Å—Ç {message.from_user.full_name}</b>üòä\n\n',
                             reply_markup=await kb.driver_start_or_finish())
        return

    tg_id = message.from_user.id
    user = await get_user(tg_id)

    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –µ–≥–æ
        await message.answer(f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!</b> üòä',
                             reply_markup=await kb.main())
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–∞–∫—Å–∏ –≥–æ—Ä–æ–¥–æ–∫!\n'
                             f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ c –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏:',
                             reply_markup=await kb.phone())
        await state.set_state(AddUser.phone)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(AddUser.phone, F.contact)
async def process_phone(message: Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_number = message.contact.phone_number
    tg_id = message.from_user.id

    # –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await set_user(tg_id, phone_number)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
    await message.answer(f'–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', reply_markup=ReplyKeyboardRemove())
    await message.answer(f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!</b> üòä',
                         reply_markup=await kb.main())
    await state.clear()


@router.message(AddUser.phone)
async def process_invalid_phone(message: Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á—Ç–æ-—Ç–æ, –∫—Ä–æ–º–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞')


@router.callback_query(F.data == 'neworder')
async def neworder(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.edit_text(
        f'<b>üÖ∞Ô∏è: –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç –∫—É–¥–∞ –ø–æ–µ–¥–∏—Ç–µ:</b>',
        reply_markup=await kb_city.keyboard_city1())
    await state.set_state(AddOrder.city1)


@router.callback_query(AddOrder.city1, or_f(F.data.startswith('cities1_'),
                                            F.data.startswith('citiesoutside1_')))
async def city1(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    if callback.data.startswith('citiesoutside1_'):
        await callback.message.edit_text(
            f'<b>üÖ∞Ô∏è: –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç –∫—É–¥–∞ –ø–æ–µ–¥–∏—Ç–µ:</b>',
            reply_markup=await kb_city.keyboard_city3())
        await state.set_state(AddOrder.city1)
        return

    city1 = callback.data.split('_')[1]
    price1 = callback.data.split('_')[2]
    await state.update_data(city1=city1, price1=price1)
    await callback.message.edit_text(
        f'<b>üÖ∞Ô∏è: –ù–∞–ø–∏—à–∏—Ç–µ  –£–ª–∏—Ü—É –∏ ‚Ññ –¥–æ–º–∞\n'
        f'–ù–∞–ø—Ä–∏–º–µ—Ä: –Æ–∂–Ω–∞—è 8</b>',
        reply_markup=await kb.cancel_order())
    await state.set_state(AddOrder.address1)


@router.message(AddOrder.city1)
async def city2(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞')


@router.message(AddOrder.address1, F.text)
async def address1(message: Message, state: FSMContext):
    await state.update_data(address1=message.text)
    data = await state.get_data()
    await message.answer(f'<b>üÖ∞Ô∏è: {data["city1"]} - {data["address1"]}\n\n'
                         f'üÖ±Ô∏è: –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∫—É–¥–∞ –ø–æ–µ–¥–∏—Ç–µ:</b>',
                         reply_markup=await kb_city.keyboard_city2())
    await state.set_state(AddOrder.city2)


@router.message(AddOrder.address1)
async def address1(message: Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç –∫—É–¥–∞ –ø–æ–µ–¥–∏—Ç–µ')


@router.callback_query(AddOrder.city2, or_f(F.data.startswith('cities2_'),
                                            F.data.startswith('citiesoutside2_')))
async def city2(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    if callback.data.startswith('citiesoutside2_'):
        data = await state.get_data()
        await callback.message.edit_text(f'<b>üÖ∞Ô∏è: {data["city1"]} - {data["address1"]}\n\n'
                             f'üÖ±Ô∏è: –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∫—É–¥–∞ –ø–æ–µ–¥–∏—Ç–µ:</b>',
                             reply_markup=await kb_city.keyboard_city4())
        await state.set_state(AddOrder.city2)
        return
    city2 = callback.data.split('_')[1]
    price2 = callback.data.split('_')[2]
    await state.update_data(city2=city2, price2=price2)
    await callback.message.edit_text(
        f'<b>üÖ±Ô∏è: –ù–∞–ø–∏—à–∏—Ç–µ  –£–ª–∏—Ü—É –∏ ‚Ññ –¥–æ–º–∞\n'
        f'–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–µ–Ω–∏–Ω–∞ 60</b>',
        reply_markup=await kb.cancel_order())
    await state.set_state(AddOrder.address2)


@router.message(AddOrder.city2)
async def city2(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞')


@router.message(AddOrder.address2, F.text)
async def address2(message: Message, state: FSMContext):
    await state.update_data(address2=message.text)
    data = await state.get_data()
    point_start = f'{data["city1"]} - {data["address1"]}'
    point_end = f'{data["city2"]} - {data["address2"]}'

    price1 = data['price1']
    price2 = data['price2']
    print(type(price1), type(price2))
    price_max = max(int(price1), int(price2))
    price = int(price_max) + Settings.fix_price
    await message.answer(f"üÖ∞Ô∏è: –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: <b>{point_start}</b>\n\n"
                         f"üÖ±Ô∏è: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: <b>{point_end}</b>\n\n"
                         f"<b>–¶–µ–Ω–∞:</b> {price}‚ÇΩ",
                         reply_markup=await kb.order_now())


@router.message(AddOrder.address2)
async def address2(message: Message):
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∫—É–¥–∞ –ø–æ–µ–¥–∏—Ç–µ')


@router.callback_query(F.data == 'order_now')
async def finish_price(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer('')
    data = await state.get_data()

    point_start = f'{data["city1"]} - {data["address1"]}'
    point_end = f'{data["city2"]} - {data["address2"]}'

    price1 = data['price1']
    price2 = data['price2']
    price_max = max(price1, price2)
    price = int(price_max) + Settings.fix_price

    await state.clear()
    await state.update_data(point_start=point_start, point_end=point_end, price=price)
    data = await state.get_data()

    user_id = await get_user(callback.from_user.id)
    order_id = await set_order(user_id.id, data)
    order_data = await get_all_orders(order_id)
    await bot.send_message(chat_id=os.getenv('CHAT_GROUP_ID'),
                           text=f"–ó–∞–∫–∞–∑ <b>{order_id}</b>\n\n"
                                f"–¢–µ–ª–µ—Ñ–æ–Ω <b>+{user_id.phone}</b>\n\n"
                                f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_data.point_start}</b>\n\n"
                                f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_data.point_end}</b>\n\n"
                           # f"<b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> {order_data.distance}–∫–º\n\n"
                           # f"<b>–í—Ä–µ–º—è –ø—É—Ç–∏:</b> {order_data.time_way}–º–∏–Ω\n\n"
                                f"–¶–µ–Ω–∞: <b>{order_data.price}–†</b>",
                           reply_markup=await kb.accept(order_id, callback.message.message_id))
    await callback.message.edit_text(f"<b>–û–∂–∏–¥–∞–π—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è‚åõ</b>\n\n"
                                     f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_data.point_start}</b>\n\n"
                                     f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_data.point_end}</b>\n\n"
                                     # f"<b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> {order_data.distance}–∫–º\n\n"
                                     # f"<b>–í—Ä–µ–º—è –ø—É—Ç–∏:</b> {order_data.time_way}–º–∏–Ω\n\n"
                                     f"–¶–µ–Ω–∞: <b>{order_data.price}–†</b>",
                                     reply_markup=await kb.delete_order(order_id))

    await state.clear()


@router.callback_query(F.data.startswith('deleteorder_'))
async def delete_order_passager(callback: CallbackQuery, bot: Bot):
    await callback.answer('')
    order_id = callback.data.split('_')[1]
    driver_id = await get_order_driver(order_id)
    if driver_id is not None:
        await bot.send_message(chat_id=driver_id.tg_id, text='–ü–∞—Å—Å–∞–∂–∏—Ä –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑')
    await delete_order_pass(order_id)
    await callback.message.edit_text('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω')


# -------------–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
class SendMessage(StatesGroup):
    send_manager = State()


@router.message(Command('manager'))
async def send_manager_call(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(SendMessage.send_manager)
    await message.answer(f'üñäÔ∏è<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¢–∞–∫—Å–∏ –≥–æ—Ä–æ–¥–æ–∫</b> üöï',
                         reply_markup=await kb.cancel_order())


@router.message(SendMessage.send_manager)
async def get_manager(message: Message, state: FSMContext, bot: Bot):
    user = await get_user(message.from_user.id)
    if message.text:
        await state.update_data(send_manager=message.text)
        await bot.send_message(chat_id=os.getenv('CHAT_ID_ADMIN'),
                               text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫ –Ω–µ–π–º: <b>@{message.from_user.username}</b>\n'
                                    f'–ò–º—è: <b>{message.from_user.first_name}</b>\n'
                                    f'CHAT ID: <b>{message.from_user.id}</b>\n'
                                    f'–¢–µ–ª–µ—Ñ–æ–Ω: <b>+{user.phone}</b>\n'
                                    f'------------------------------\n'
                                    f'–°–æ–æ–±—â–µ–Ω–∏–µ:\n'
                                    f'<i>{message.text}</i>\n')
        await state.clear()
        await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä',
                             reply_markup=await kb.main())

    elif message.voice:
        await state.update_data(send_manager=message.voice)
        await bot.send_voice(chat_id=os.getenv('CHAT_ID_ADMIN'),
                             caption=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫ –Ω–µ–π–º: <b>@{message.from_user.username}</b>\n'
                                     f'–ò–º—è: <b>{message.from_user.first_name}</b>\n'
                                     f'CHAT ID: <b>{message.from_user.id}</b>\n'
                                     f'–¢–µ–ª–µ—Ñ–æ–Ω: <b>+{user.phone}</b>\n',
                             voice=message.voice.file_id)
        await state.clear()
        await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä',
                             reply_markup=await kb.main())
    else:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')


# ----------------–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¢–∞–∫—Å–∏—Å—Ç–æ–≤---------------
# ----------------–í—ã–π—Ç–∏ –Ω–∞ –ª–∏–Ω–∏—é ---------------------
@router.callback_query(F.data.startswith('driverstart_'))
async def driver_start(callback: CallbackQuery):
    await callback.answer('')
    await active_driver(callback.message.chat.id, is_start=True)
    await callback.message.edit_text('–í—ã –≤—ã—à–ª–∏ –Ω–∞ –ª–∏–Ω–∏—é')


# ----------------–£–π—Ç–∏ —Å –ª–∏–Ω–∏–∏ –Ω–∞ –ª–∏–Ω–∏—é ---------------------
@router.callback_query(F.data.startswith('driverfinish_'))
async def driver_finish(callback: CallbackQuery):
    await callback.answer('')
    await active_driver(callback.message.chat.id, is_start=False)
    await callback.message.edit_text('–í—ã —É—à–ª–∏ —Å –ª–∏–Ω–∏–∏')


# –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —Ç–∞–∫—Å–∏

class AddDrivercar(StatesGroup):
    phone = State()
    car_name = State()
    number_car = State()
    photo_car = State()


@router.message(Command('add_car'))
async def add_phone1(message: Message, state: FSMContext):
    await state.set_state(AddDrivercar.phone)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=await kb.cancel_order())


@router.message(AddDrivercar.phone, F.text)
async def add_car_name(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(AddDrivercar.car_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –º–∞—à–∏–Ω—ã', reply_markup=await kb.cancel_order())


@router.message(AddDrivercar.phone)
async def add_phone2(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É')


@router.message(AddDrivercar.car_name, F.text)
async def add_number_car(message: Message, state: FSMContext):
    await state.update_data(car_name=message.text)
    await state.set_state(AddDrivercar.number_car)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã', reply_markup=await kb.cancel_order())


@router.message(AddDrivercar.car_name)
async def add_car_name(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã')


@router.message(AddDrivercar.number_car, F.text)
async def add_tg_id(message: Message, state: FSMContext):
    await state.update_data(number_car=message.text)
    await state.set_state(AddDrivercar.photo_car)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã', reply_markup=await kb.cancel_order())


@router.message(AddDrivercar.number_car)
async def add_number_car(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫–Ω–æ –≥–æ—Å –Ω–æ–º–µ—Ä')


@router.message(AddDrivercar.photo_car, F.photo)
async def add_item_category(message: Message, state: FSMContext, bot: Bot):
    message_user = message.from_user.id
    await state.update_data(photo_car=message.photo[-1].file_id, tg_id=message_user)
    data = await state.get_data()
    driver_id = await add_car(data)

    # await message.answer_photo(photo=data['photo_car'], caption=f"–¢–µ–ª–µ—Ñ–æ–Ω {data['phone']}")
    chat_admin = os.environ.get('CHAT_ID_ADMIN')
    await message.answer('–ú–∞—à–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ')
    await bot.send_photo(chat_id=chat_admin,
                         photo=data['photo_car'],
                         caption=f'–†–≥–µ–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n'
                                 f'–¢–µ–ª–µ—Ñ–æ–Ω:<b> {data["phone"]}</b>\n\n'
                                 f'–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã: <b>{data["car_name"]}</b>\n\n'
                                 f'–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: <b>{data["number_car"]}–†</b>',
                         reply_markup=await kb.add_car_or_no(driver_id))
    await state.clear()


@router.message(AddDrivercar.photo_car)
async def phone(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
