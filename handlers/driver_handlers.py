import os
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from dotenv import load_dotenv

from app.database.requests import get_all_orders, get_driver, delete_order_execution, delete_order_pass, \
    get_order_driver
from filters.chat_type import ChatTypeFilter
import app.keyboards as kb

driver_router = Router()
driver_router.message.filter(ChatTypeFilter(['private']))
load_dotenv()


@driver_router.callback_query(F.data.startswith('close_'))
async def close(callback: CallbackQuery, bot: Bot):
    try:
        await callback.answer('')
        order_id = await get_all_orders(callback.data.split('_')[1])
        driver_id = await get_driver(callback.from_user.id)
        message_id = callback.data.split('_')[2]

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        await delete_order_execution(order_id.id, driver_id.id)

        await bot.delete_message(chat_id=order_id.user_rel.tg_id, message_id=message_id)
        message_id_pass = await bot.send_message(chat_id=order_id.user_rel.tg_id,
                                                 text=f'–û–∂–∏–¥–∞–π—Ç–µ ‚åõ\n'
                                                      f'–ë—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n',
                                                 reply_markup=await kb.delete_order(order_id.id))
        await bot.send_message(chat_id=os.getenv('CHAT_GROUP_ID'),
                               text=f'–í–æ–¥–∏—Ç–µ–ª—å {driver_id.name} –æ—Ç–º–µ–Ω–∏–ª –≤—ã–ø–æ–Ω–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n'
                                    f"–¢–µ–ª–µ—Ñ–æ–Ω <b>+{order_id.user_rel.phone}</b>\n\n"
                                    f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_start}</b>\n\n"
                                    f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_end}</b>\n\n"
                               # f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <b>{order_id.distance}–∫–º</b>\n\n"
                               # f"–í—Ä–µ–º—è –ø—É—Ç–∏: <b>{order_id.time_way}–º–∏–Ω</b>\n\n"
                                    f"–¶–µ–Ω–∞: <b>{order_id.price}–†</b>\n\n",
                               reply_markup=await kb.accept(order_id.id, message_id_pass.message_id))

        await callback.message.edit_text(f'–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞ <b>‚Ññ{order_id.id}</b>')


    except AttributeError:
        await callback.answer('')
        await callback.message.edit_text('–ü–∞—Å—Å–∞–∂–∏—Ä –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑')


@driver_router.callback_query(F.data.startswith('timewait_'))
async def timewait(callback: CallbackQuery, bot: Bot):
    try:
        await callback.answer('')
        order_id = await get_all_orders(callback.data.split('_')[1])

        driver = await get_driver(callback.from_user.id)
        time_wait = callback.data.split('_')[2]
        message_id = callback.data.split('_')[3]

        await bot.delete_message(chat_id=order_id.user_rel.tg_id, message_id=message_id)


        message_pass = await bot.send_photo(chat_id=order_id.user_rel.tg_id,
                                            photo=driver.photo_car,
                                            caption=f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:<b> +{driver.phone}</b>\n\n'
                                                    f'–ê–≤—Ç–æ–º–æ–±–∏–ª—å:<b> {driver.car_name}</b>\n\n'
                                                    f'–ù–æ–º–µ—Ä: <b>{driver.number_car}</b>\n\n'
                                                    f'–¶–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏: <b>{order_id.price}–†</b>\n\n'
                                                    f'–ë—É–¥–µ—Ç —É –≤–∞—Å —á–µ—Ä–µ–∑ <b>{time_wait} –º–∏–Ω.</b>',
                                            reply_markup=await kb.delete_order(order_id.id))


        await callback.message.edit_text(f"–ó–∞–∫–∞–∑ <b>{order_id.id}</b>\n\n"
                                         f"–¢–µ–ª–µ—Ñ–æ–Ω <b>+{order_id.user_rel.phone}</b>\n\n"
                                         f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_start}</b>\n\n"
                                         f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_end}</b>\n\n"
                                         # f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <b>{order_id.distance}–∫–º</b>\n\n"
                                         # f"–í—Ä–µ–º—è –ø—É—Ç–∏: <b>{order_id.time_way}–º–∏–Ω</b>\n\n"
                                         f"–¶–µ–Ω–∞: <b>{order_id.price}–†</b>\n\n",
                                         reply_markup=await kb.on_the_spot_kb(order_id.id, message_pass.message_id))
        # reply_markup = await kb.close_and_finish(order_id.id)
    except AttributeError:
        await callback.answer('')
        await callback.message.answer('–ü–∞—Å—Å–∞–∂–∏—Ä –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑')


@driver_router.callback_query(F.data.startswith('onthespot_'))
async def on_the_spot(callback: CallbackQuery, bot: Bot):
    try:
        await callback.answer('')
        order_id = await get_all_orders(callback.data.split('_')[1])
        driver = await get_driver(callback.from_user.id)
        message_id = callback.data.split('_')[2]

        await bot.delete_message(chat_id=order_id.user_rel.tg_id, message_id=message_id)

        message_pass = await bot.send_photo(chat_id=order_id.user_rel.tg_id,
                                            photo=driver.photo_car,
                                            caption=f'<b>–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–µ—Ö–∞–ª –∑–∞ –≤–∞–º–∏ ‚úÖüöï</b>\n\n'
                                                    f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:<b> +{driver.phone}</b>\n\n'
                                                    f'–ê–≤—Ç–æ–º–æ–±–∏–ª—å:<b> {driver.car_name}</b>\n\n'
                                                    f'–ù–æ–º–µ—Ä: <b>{driver.number_car}</b>\n\n'
                                                    f'–¶–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏: <b>{order_id.price}–†</b>\n\n',
                                            reply_markup=await kb.delete_order(order_id.id))
        await callback.message.edit_text(f"–ó–∞–∫–∞–∑ <b>{order_id.id}</b>\n\n"
                                         f"–¢–µ–ª–µ—Ñ–æ–Ω <b>+{order_id.user_rel.phone}</b>\n\n"
                                         f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_start}</b>\n\n"
                                         f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_end}</b>\n\n"
                                         # f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <b>{order_id.distance}–∫–º</b>\n\n"
                                         # f"–í—Ä–µ–º—è –ø—É—Ç–∏: <b>{order_id.time_way}–º–∏–Ω</b>\n\n"
                                         f"–¶–µ–Ω–∞: <b>{order_id.price}–†</b>\n\n",
                                         reply_markup=await kb.close_and_finish(order_id.id, message_pass.message_id))
    except AttributeError:
        await callback.answer('')
        await callback.message.answer('–ü–∞—Å—Å–∞–∂–∏—Ä –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑')


@driver_router.callback_query(F.data.startswith('finish_'))
async def finish(callback: CallbackQuery, bot: Bot):
    try:
        await callback.answer('')
        order_id = await get_all_orders(callback.data.split('_')[1])
        driver_id = await get_driver(callback.from_user.id)
        message_id_pass = callback.data.split('_')[2]
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        # await delete_order_execution(order_id.id, driver_id.id)


        await bot.delete_message(chat_id=order_id.user_rel.tg_id, message_id=message_id_pass)
        await bot.send_message(chat_id=order_id.user_rel.tg_id,
                               text=f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω‚úÖ.\n'
                                    f'–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ üôè\n',
                               reply_markup=await kb.main())
        await callback.message.delete()
    except AttributeError:
        await callback.answer('')
        await callback.message.answer('–ü–∞—Å—Å–∞–∂–∏—Ä –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑')


@driver_router.callback_query(F.data.startswith('deleteorder_'))
async def delete_order_passager(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.answer('')
    await callback.message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω')
    order_id = callback.data.split('_')[1]
    driver_id = await get_order_driver(order_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ drivers_reply –ø—É—Å—Ç
    if not driver_id.drivers_reply:
        await callback.message.answer('–ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞')
    else:
        driver = driver_id.drivers_reply[0]
        await bot.send_message(chat_id=driver.tg_id, text='–ü–∞—Å—Å–∞–∂–∏—Ä –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑')

    await delete_order_pass(order_id)
    await state.clear()
