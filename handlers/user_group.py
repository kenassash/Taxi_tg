import os
from string import punctuation
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from dotenv import load_dotenv

from filters.chat_type import ChatTypeFilter
from aiogram.filters import CommandStart, Command, Filter
from aiogram import Bot
import app.keyboards as kb
from app.database.requests import get_all_orders, get_driver

user_group_router = Router()
user_group_router.message.filter(ChatTypeFilter(['group', 'supergroup']))
load_dotenv()

restricted_words = {'–∫–∞–±–∞–Ω', '—Ö–æ–º—è–∫', '–≤—ã–ø—É—Ö–æ–ª—å'}


# def clean_text(text: str):
#     return text.translate(str.maketrans('', '', punctuation))

# @user_group_router.message()
# async def cleaner(message: Message):
#     if restricted_words.intersection(message.text.lower().split()):
#         await message.answer(f'{message.from_user.first_name}, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —á–∞—Ç–∞')
#         await message.delete()

# @user_group_router.message(CommandStart())
# async def cmd_start(message: Message):
#     await message.answer(f'{message.chat.id}')

@user_group_router.callback_query(F.data.startswith('accept_'))
async def accept(callback: CallbackQuery, bot: Bot):
    await callback.answer('')
    order_id = await get_all_orders(callback.data.split('_')[1])
    driver = await get_driver(callback.from_user.id)
    await callback.message.edit_text(f'<i><b>–ó–∞–∫–∞–∑ ‚Ññ {order_id.id}</b></i>\n'
                                     f'–ü—Ä–∏–Ω—è–ª -  {callback.from_user.first_name} \n'
                                     f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞  +{order_id.phone}')
    await bot.send_photo(chat_id=order_id.tg_id, photo=driver.photo_car, caption=f'–ó–∞ –≤–∞–º–∏ –ø—Ä–∏–µ–¥–µ—Ç {driver.car_name}')
    await bot.send_message(chat_id=callback.from_user.id,
                           text=callback.message.text,
                           reply_markup=await kb.close_and_finish(order_id.id))


@user_group_router.callback_query(F.data.startswith('close_'))
async def accept(callback: CallbackQuery, bot: Bot):
    await callback.answer('')
    order_id = await get_all_orders(callback.data.split('_')[1])
    await callback.message.edit_text(f'–¢—ã –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id.id}')
    await bot.send_message(chat_id=os.getenv('CHAT_GROUP_ID'),
                           text=f'–í–æ–¥–∏—Ç–µ–ª—å {callback.from_user.first_name} –æ—Ç–º–µ–Ω–∏–ª –≤—ã–ø–æ–Ω–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n'
                                f'{callback.message.text}\n',
                           reply_markup=await kb.accept(order_id.id))

    await bot.send_message(chat_id=order_id.tg_id,
                           text=f'–û–∂–∏–¥–∞–π—Ç–µ ‚åõ\n'
                                f'–ë—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å>\n')


@user_group_router.callback_query(F.data.startswith('finish_'))
async def accept(callback: CallbackQuery, bot: Bot):
    await callback.answer('')
    order_id = await get_all_orders(callback.data.split('_')[1])
    await callback.message.edit_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω {order_id.id}')
    await bot.send_message(chat_id=os.getenv('CHAT_GROUP_ID'),
                           text=f"–ó–∞–∫–∞–∑ ‚Ññ {order_id.id} –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ\n\n"
                                f"–í–æ–¥–∏—Ç–µ–ª–µ–º {callback.from_user.first_name}")
    await bot.send_message(chat_id=order_id.tg_id,
                           text=f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω‚úÖ.\n '
                                f'–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ üôè\n ')
