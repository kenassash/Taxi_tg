import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from dotenv import load_dotenv

from app.change_price import Settings
from filters.chat_type import ChatTypeFilter
from aiogram import Bot
import app.keyboards as kb
from app.database.requests import get_all_orders, get_driver, start_order_execution, delete_order_execution

user_group_router = Router()
user_group_router.message.filter(ChatTypeFilter(['group', 'supergroup']))
load_dotenv()


# restricted_words = {'–∫–∞–±–∞–Ω', '—Ö–æ–º—è–∫', '–≤—ã–ø—É—Ö–æ–ª—å'}


# def clean_text(text: str):
#     return text.translate(str.maketrans('', '', punctuation))

# @user_group_router.message()
# async def cleaner(message: Message):
#     if restricted_words.intersection(message.text.lower().split()):
#         await message.answer(f'{message.from_user.first_name}, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —á–∞—Ç–∞')
#         await message.delete()

# @user_group_router.message(CommandStart())
# async def cmd_start(message: Message):
#     await message.answer(f'{message.chat.id}')

@user_group_router.callback_query(F.data.startswith('accept_'))
async def accept(callback: CallbackQuery, bot: Bot):
    await callback.answer('')
    order_id = await get_all_orders(callback.data.split('_')[1])
    driver = await get_driver(callback.from_user.id)
    # —Å–æ–æ–±—â–µ–Ω–∏–µ id –ø—Ä–µ–¥—ã–¥—É—â–µ–µ (–æ–∂–∏–¥–∞–Ω–∏–µ —á—Ç–æ–± —É–¥–∞–ª–∏—Ç—å)
    message_id_id = callback.data.split('_')[2]

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await start_order_execution(order_id.id, driver.id)
    # —É–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ
    # await bot.delete_message(chat_id=order_id.user_rel.tg_id, message_id=message_id_id)

    # await bot.send_photo(chat_id=order_id.user_rel.tg_id, photo=driver.photo_car, caption=f'–ó–∞ –≤–∞–º–∏ –ø—Ä–∏–µ–¥–µ—Ç —Ç–∞–∫—Å–∏ <b>{driver.car_name} {driver.number_car}</b>\n')
    # await bot.send_message(chat_id=callback.from_user.id,
    #                        text=callback.message.text,
    #                        reply_markup=await kb.close_and_finish(order_id.id))
    # await bot.send_message(chat_id=callback.from_user.id,
    #                        text=callback.message.text)
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f"–ó–∞–∫–∞–∑ <b>{order_id.id}</b>\n\n"
                                f"–¢–µ–ª–µ—Ñ–æ–Ω <b>+{order_id.user_rel.phone}</b>\n\n"
                                f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_start}</b>\n\n"
                                f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_end}</b>\n\n"
                           # f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <b>{order_id.distance}–∫–º</b>\n\n"
                           # f"–í—Ä–µ–º—è –ø—É—Ç–∏: <b>{order_id.time_way}–º–∏–Ω</b>\n\n"
                                f"–¶–µ–Ω–∞: <b>{order_id.price}–†</b>\n\n"
                                f'‚åö –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏: ‚¨áÔ∏è',
                           reply_markup=await kb.time_wait(order_id.id, message_id_id))
    await callback.message.edit_text(text=f'–¢–∞–∫—Å–∏ –±–æ—Ç', reply_markup=await kb.go_to_order())


@user_group_router.callback_query(F.data.startswith('close_'))
async def accept(callback: CallbackQuery, bot: Bot):
    await callback.answer('')
    order_id = await get_all_orders(callback.data.split('_')[1])
    driver_id = await get_driver(callback.from_user.id)

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await delete_order_execution(order_id.id, driver_id.id)

    await callback.message.edit_text(f'–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞ <b>‚Ññ{order_id.id}</b>')
    await bot.send_message(chat_id=os.getenv('CHAT_GROUP_ID'),
                           text=f'–í–æ–¥–∏—Ç–µ–ª—å {callback.from_user.first_name} –æ—Ç–º–µ–Ω–∏–ª –≤—ã–ø–æ–Ω–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n'
                                 f"–¢–µ–ª–µ—Ñ–æ–Ω <b>+{order_id.user_rel.phone}</b>\n\n"
                                f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_start}</b>\n\n"
                                f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_end}</b>\n\n"
                           # f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <b>{order_id.distance}–∫–º</b>\n\n"
                           # f"–í—Ä–µ–º—è –ø—É—Ç–∏: <b>{order_id.time_way}–º–∏–Ω</b>\n\n"
                                f"–¶–µ–Ω–∞: <b>{order_id.price}–†</b>\n\n",
                           reply_markup=await kb.accept(order_id.id, callback.message.message_id))

    await bot.send_message(chat_id=order_id.user_rel.tg_id,
                           text=f'–û–∂–∏–¥–∞–π—Ç–µ ‚åõ\n'
                                f'–ë—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n')


@user_group_router.callback_query(F.data.startswith('timewait_'))
async def accept(callback: CallbackQuery, bot: Bot):
    await callback.answer('')
    order_id = await get_all_orders(callback.data.split('_')[1])

    driver = await get_driver(callback.from_user.id)
    message_id_id = callback.data.split('_')[3]
    time_wait = callback.data.split('_')[2]

    await bot.delete_message(chat_id=order_id.user_rel.tg_id, message_id=message_id_id)

    await bot.send_photo(chat_id=order_id.user_rel.tg_id,
                         photo=driver.photo_car,
                         caption=f'–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ü§ù\n\n'
                                 f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:<b> +{driver.phone}</b>\n\n'
                                 f'–ê–≤—Ç–æ–º–æ–±–∏–ª—å:<b> {driver.car_name}</b>\n\n'
                                 f'–ù–æ–º–µ—Ä: <b>{driver.number_car}</b>\n\n'
                                 f'–¶–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏: <b>{order_id.price}–†</b>\n\n'
                                 f'–ë—É–¥–µ—Ç —É –≤–∞—Å —á–µ—Ä–µ–∑ {time_wait} –º–∏–Ω.')
    # await bot.send_message(chat_id=callback.from_user.id,
    #                        text='–ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å',
    #                        reply_markup=await kb.close_and_finish(order_id.id))
    await callback.message.edit_text(f"–ó–∞–∫–∞–∑ <b>{order_id.id}</b>\n\n"
                                     f"–¢–µ–ª–µ—Ñ–æ–Ω <b>+{order_id.user_rel.phone}</b>\n\n"
                                     f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_start}</b>\n\n"
                                     f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_end}</b>\n\n"
                                     # f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <b>{order_id.distance}–∫–º</b>\n\n"
                                     # f"–í—Ä–µ–º—è –ø—É—Ç–∏: <b>{order_id.time_way}–º–∏–Ω</b>\n\n"
                                     f"–¶–µ–Ω–∞: <b>{order_id.price}–†</b>\n\n",
                                     reply_markup=await kb.on_the_spot_kb(order_id.id))
    # reply_markup = await kb.close_and_finish(order_id.id)


@user_group_router.callback_query(F.data.startswith('onthespot_'))
async def on_the_spot(callback: CallbackQuery, bot: Bot):
    await callback.answer('')
    order_id = await get_all_orders(callback.data.split('_')[1])
    driver = await get_driver(callback.from_user.id)

    # await bot.mes(chat_id=order_id.user_rel.tg_id)
    await bot.send_message(chat_id=order_id.user_rel.tg_id,
                           text=f'<b>–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–µ—Ö–∞–ª –∑–∞ –≤–∞–º–∏ ‚úÖüöï</b>\n\n'
                                f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:<b> +{driver.phone}</b>\n\n'
                                f'–ê–≤—Ç–æ–º–æ–±–∏–ª—å:<b> {driver.car_name}</b>\n\n'
                                f'–ù–æ–º–µ—Ä: <b>{driver.number_car}</b>\n\n'
                                f'–¶–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏: <b>{order_id.price}–†</b>\n\n',
                           )
    await callback.message.edit_text(f"–ó–∞–∫–∞–∑ <b>{order_id.id}</b>\n\n"
                                     f"–¢–µ–ª–µ—Ñ–æ–Ω <b>{order_id.user_rel.phone}</b>\n\n"
                                     f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_start}</b>\n\n"
                                     f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: <b>{order_id.point_end}</b>\n\n"
                                     # f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <b>{order_id.distance}–∫–º</b>\n\n"
                                     # f"–í—Ä–µ–º—è –ø—É—Ç–∏: <b>{order_id.time_way}–º–∏–Ω</b>\n\n"
                                     f"–¶–µ–Ω–∞: <b>{order_id.price}–†</b>\n\n",
                                     reply_markup=await kb.close_and_finish(order_id.id))


@user_group_router.callback_query(F.data.startswith('finish_'))
async def accept(callback: CallbackQuery, bot: Bot):
    await callback.answer('')
    order_id = await get_all_orders(callback.data.split('_')[1])
    driver_id = await get_driver(callback.from_user.id)
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    # await delete_order_execution(order_id.id, driver_id.id)

    await callback.message.delete()

    # await callback.message.edit_text(f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω {order_id.id}')
    # await bot.send_message(chat_id=os.getenv('CHAT_GROUP_ID'),
    #                        text=f"–ó–∞–∫–∞–∑ ‚Ññ {order_id.id} –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ\n\n"
    #                             f"–í–æ–¥–∏—Ç–µ–ª–µ–º {callback.from_user.first_name}")
    await bot.send_message(chat_id=order_id.user_rel.tg_id,
                           text=f'–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω‚úÖ.\n'
                                f'–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ üôè\n',
                           reply_markup=await kb.main())
